# ---------------------------------
# Для образа фалой используем "Choose the right base image" который говорит про то что использовать 
# либо оффициальный образ либо с самым высоким рейтингом чтобы быть уверенным в корректности базового образа
# ---------------------------------


# ---------------------------------
# Также я говорю про использование "Pin base image versions" 
# в котором говориться использовать определенную версию базового образа
# так как если использовать наприме latest то со времинем суть того что храниться в latest
# будет изменена, тоесть при очередной сборке данного контейнера что то может пойти не так
# из за того что-то обнавилолсь внутри контейнера и некоторые зависимости могут перестать работать
# ---------------------------------

# Установим тег для базового образа, чтобы процесс сборки всегда проходил в одинаковых условиях
# Если проект и все его зависимости совместимы с Alpine, то лучше использовать его, так как это значительно уменьшит размер образа
FROM node:22.6.0

# ---------------------------------
# Зедсь я говорю про использование "Sort multi-line arguments" про то что лучше отсортировать зависимости так чтобы их легче можно было увидеть.
# Рекомендация про то как исопльзовать RUN с apt-get update и apt-get install и очищением кэша
# Также здесь еще подходит "Leverage build cache" тоесть например мы запускаем сборку данного контейнера 
# и после долгой установки большого колличества зависимостей унас что то ломается на моменте с копированием
# и если мы всю установку вынесим в отдельный слой то и слоев будет меньше и он весь за кэшируется
# ---------------------------------

# Объединяем несколько RUN-команд в одну, чтобы уменьшить количество слоев Docker
# Отсортируем пакеты для установки в алфавитном порядке для упрощения обслуживания Dockerfile
# Очистим кэш для уменьшения размера образа
# Похоже, что также стоит прописать версии пакетов
RUN apt-get update && apt-get install --no-install-recommends -y \
autoconf \
automake \
bash \
build-essential \
gcc \
git \
libpng-dev \
libvips-dev \
nasm \
zlib1g-dev \
&& apt-get clean \
&& rm -rf /var/lib/apt/lists/*

# Если переменную не нужно будет перезаписывать, то можно отказаться от ARG и оставить только ENV (но это не критично)
# ARG NODE_ENV=development
ENV NODE_ENV=development

# ---------------------------------
# Здесь я говорю про "Exclude with .dockerignore" в котором говориться про использование .dockerignore
# чтобы не захватить чегото лишнего в свой docker image
# ---------------------------------


# Также по-хорошему иметь файл .dockerignore, чтобы исключить копирование лишних файлов
WORKDIR /opt/
COPY . .
RUN yarn global add node-gyp \
&& yarn config set network-timeout 600000 -g \
&& yarn install


WORKDIR /opt/app
RUN chown -R node:node /opt/app
USER node

# Так как ENTRYPOINT и CMD выполняют одно и то же, можно избавиться от CMD
# Их можно использовать вместе, так как ENTRYPOINT — основная цель контейнера, а CMD — поведение по умолчанию
# ENTRYPOINT нельзя переопределить при запуске контейнера, а CMD можно
RUN ["yarn", "build"]
ENTRYPOINT ["yarn", "develop"]
# Однако ничего не запустится, так как нет package.json, но если убрать yarn build и yarn develop, то контейнер запускается
# CMD ["yarn", "develop"]
